name: "PR: Check Supabase Migration Order"

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    paths:
      - "supabase/migrations/**"

jobs:
  check-migration-timestamp:
    runs-on: ubuntu-latest
    outputs:
      summary_title: ${{ steps.check.outputs.summary_title }}
      summary_body: ${{ steps.check.outputs.summary_body }}

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Verify Migration Timestamp & Prepare Summary
        id: check
        run: |
          set -euo pipefail
          TARGET_BRANCH="origin/${{ github.base_ref }}"
          
          LATEST_TARGET_MIGRATION_TS=$(git ls-tree -r "$TARGET_BRANCH" --name-only supabase/migrations | sort -r | head -n 1 | sed -E 's|supabase/migrations/([0-9]+)_.+|\1|' || echo "0")
          
          mapfile -t NEW_MIGRATIONS < <(git diff --name-only --diff-filter=A "$TARGET_BRANCH"...HEAD | grep 'supabase/migrations/' || true)

          if [ ${#NEW_MIGRATIONS[@]} -eq 0 ]; then
            echo "summary_title=✅ Supabase Migration Check" >> "$GITHUB_OUTPUT"
            echo "summary_body<<EOF" >> "$GITHUB_OUTPUT"
            echo "No new migrations detected." >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          ERROR_DETAILS=""
          HAS_ERROR=false
          for file in "${NEW_MIGRATIONS[@]}"; do
            PR_MIGRATION_TS=$(basename "$file" | cut -d'_' -f1)
            if [[ "$PR_MIGRATION_TS" -le "$LATEST_TARGET_MIGRATION_TS" ]]; then
              HAS_ERROR=true
              # FINAL FIX: Use printf for safe, reliable string formatting.
              # This correctly expands all variables and uses <br> for line breaks.
              line=$(printf "**File:** \`%s\`<br>**Problem:** Timestamp (%s) is not newer than the latest in \`%s\` (%s)." \
                "$file" "$PR_MIGRATION_TS" "${{ github.base_ref }}" "$LATEST_TARGET_MIGRATION_TS")
              ERROR_DETAILS+="$line<br><br>"
            fi
          done

          if [ "$HAS_ERROR" = true ]; then
            echo "summary_title=❌ Supabase Migration Check Failed" >> "$GITHUB_OUTPUT"
            SUMMARY_BODY=$(cat <<EOF
          One or more migration files have outdated timestamps.<br><br>
          ${ERROR_DETAILS}
          👉 **To fix:** Rebase your branch on \`${{ github.base_ref }}\` and rename your migration file(s) to a current timestamp.
          EOF
          )
            echo "summary_body<<EOF" >> "$GITHUB_OUTPUT"
            echo "$SUMMARY_BODY" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
            exit 1
          else
            echo "summary_title=✅ Supabase Migration Check Passed" >> "$GITHUB_OUTPUT"
            echo "summary_body<<EOF" >> "$GITHUB_OUTPUT"
            echo "All new migration timestamps are valid." >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          fi

  post-summary:
    runs-on: ubuntu-latest
    needs: [check-migration-timestamp]
    permissions:
      pull-requests: write
    if: always()

    steps:
      - name: Create or Update PR Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### ${{ needs.check-migration-timestamp.outputs.summary_title }}
            ${{ needs.check-migration-timestamp.outputs.summary_body }}
