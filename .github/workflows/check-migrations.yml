name: "PR: Check Supabase Migration Order"

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "supabase/migrations/**"

jobs:
  check-migration-timestamp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      - name: Verify Migration Timestamp
        run: |
          set -euo pipefail

          # The target branch (e.g., 'develop' or 'main')
          TARGET_BRANCH="origin/${{ github.base_ref }}"

          # This correctly finds the latest migration file and extracts its timestamp.
          LATEST_TARGET_MIGRATION_TS=$(git ls-tree -r "$TARGET_BRANCH" --name-only supabase/migrations | sort -r | head -n 1 | sed -E 's|supabase/migrations/([0-9]+)_.+|\1|' || echo "0")
          
          echo "Latest migration timestamp on '${TARGET_BRANCH}' is: ${LATEST_TARGET_MIGRATION_TS}"

          # Find any new migration files added in this PR (status 'A' for Added).
          # The three dots (...) compare the tip of the PR branch with the merge base.
          mapfile -t NEW_MIGRATIONS < <(git diff --name-only --diff-filter=A "$TARGET_BRANCH"...HEAD | grep 'supabase/migrations/' || true)

          if [ ${#NEW_MIGRATIONS[@]} -eq 0 ]; then
            echo "‚úÖ No new migrations detected in this PR. Check passed."
            exit 0
          fi

          echo "Found ${#NEW_MIGRATIONS[@]} new migration(s) to check..."
          
          HAS_ERROR=false
          for file in "${NEW_MIGRATIONS[@]}"; do
            PR_MIGRATION_TS=$(basename "$file" | cut -d'_' -f1)
            echo "-> Checking '${file}' with timestamp ${PR_MIGRATION_TS}"
            
            # Compare the timestamps numerically
            if [[ "$PR_MIGRATION_TS" -le "$LATEST_TARGET_MIGRATION_TS" ]]; then
              echo "‚ùå ERROR: Migration file '${file}' has a timestamp (${PR_MIGRATION_TS}) that is not newer than the latest migration in '${{ github.base_ref }}' (${LATEST_TARGET_MIGRATION_TS})."
              HAS_ERROR=true
            else
              echo "‚úÖ Timestamp ${PR_MIGRATION_TS} is valid."
            fi
          done

          if [ "$HAS_ERROR" = true ]; then
            echo ""
            echo "üëâ To fix this, please rebase your branch on the latest '${{ github.base_ref }}' and rename your migration file(s) to have a current timestamp."
            exit 1
          fi

          echo "üéâ All new migration timestamps are valid."
