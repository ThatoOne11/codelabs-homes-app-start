name: Deploy Supabase Functions & Auth Email Templates

on:
  push:
    branches:
      - main
    paths:
      - "supabase/functions/**"
      - "supabase/email_templates/**"
  workflow_dispatch:
    inputs:
      commit_sha:
        description: "Optional: specify a commit SHA to deploy"
        default: ""

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ----------------------------
      # Checkout repo
      # ----------------------------
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ----------------------------
      # Setup Node.js
      # ----------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # ----------------------------
      # Determine Git Range and Changed Files
      # ----------------------------
      - name: Determine Git Range and Changed Files
        id: git_changes
        run: |
          set -euo pipefail

          # Determine the Git diff range based on event type and optional input
          RANGE=""
          if [ "${{ github.event.inputs.commit_sha }}" != "" ]; then
            RANGE="${{ github.event.inputs.commit_sha }}^..${{ github.event.inputs.commit_sha }}"
            echo "Using specified commit SHA: ${{ github.event.inputs.commit_sha }}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RANGE="HEAD^..HEAD"
            echo "Manual run, using latest commit range: $RANGE"
          else
            RANGE="${{ github.event.before }}..${{ github.sha }}"
            echo "Push event, using range: $RANGE"
          fi

          # Get all changed files within the determined range and save them to an output
          CHANGED_FILES=$(git diff --name-only "$RANGE" || true)
          echo "changed_files=$(echo "$CHANGED_FILES" | tr '\n' ' ')" >> "$GITHUB_OUTPUT"
          echo "Determined git diff range: $RANGE"

      # ----------------------------
      # Detect changed edge functions
      # ----------------------------
      - name: Detect changed functions
        id: functions
        run: |
          CHANGED_FUNCS=$(echo "${{ steps.git_changes.outputs.changed_files }}" | tr ' ' '\n' | grep '^supabase/functions/' | cut -d'/' -f3 | uniq || true)
          VALID_FUNCS=()
          if [ -n "$CHANGED_FUNCS" ]; then
            while IFS= read -r fn; do
              if [[ "$fn" =~ ^[a-zA-Z][a-zA-Z0-9_-]*$ ]]; then
                VALID_FUNCS+=("$fn")
              else
                echo "‚ö†Ô∏è Skipping invalid function folder: $fn"
              fi
            done <<< "$CHANGED_FUNCS"
          fi
          if [ ${#VALID_FUNCS[@]} -gt 0 ]; then
            FUNCS_SPACE="${VALID_FUNCS[*]}"
            FUNCS_COMMA=$(IFS=, ; echo "${VALID_FUNCS[*]}")
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "files=$FUNCS_SPACE" >> $GITHUB_OUTPUT
            echo "files_pretty=$FUNCS_COMMA" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      # ----------------------------
      # Detect changed email templates
      # ----------------------------
      - name: Detect changed email templates
        id: email
        run: |
          CHANGED_EMAIL_PATHS_RAW=$(echo "${{ steps.git_changes.outputs.changed_files }}" | tr ' ' '\n' | grep '^supabase/email_templates/.*\.html$' || true)
          if [ -n "$CHANGED_EMAIL_PATHS_RAW" ]; then
            CHANGED_EMAIL_PATHS=$(echo "$CHANGED_EMAIL_PATHS_RAW" | paste -sd "," -)
            CHANGED_EMAIL_BASENAMES=$(echo "$CHANGED_EMAIL_PATHS_RAW" | xargs -n 1 basename | paste -sd "," -)
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "files=$CHANGED_EMAIL_PATHS" >> $GITHUB_OUTPUT
            echo "files_pretty=$CHANGED_EMAIL_BASENAMES" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      # ----------------------------
      # Deploy changed Edge Functions
      # ----------------------------
      - name: Deploy changed Edge Functions
        if: steps.functions.outputs.changed == 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "Functions to deploy: ${{ steps.functions.outputs.files_pretty }}"
          for fn in ${{ steps.functions.outputs.files }}; do
            echo "üöÄ Deploying function: $fn"
            npx supabase functions deploy "$fn" --project-ref $PROJECT_ID
          done

      # ----------------------------
      # Sync Auth Email Templates
      # ----------------------------
      - name: Sync Auth Email Templates
        if: steps.email.outputs.changed == 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "üì© Updating Auth email templates..."
          declare -A TEMPLATE_KEYS
          TEMPLATE_KEYS["invite.html"]="mailer_templates_invite_content"
          TEMPLATE_KEYS["reset_password.html"]="mailer_templates_recovery_content"
          TEMPLATE_KEYS["confirm_signup.html"]="mailer_templates_confirmation_content"
          TEMPLATE_KEYS["magic_link.html"]="mailer_templates_magic_link_content"
          TEMPLATE_KEYS["change_email.html"]="mailer_templates_email_change_content"

          PAYLOAD="{"
          IFS=',' read -ra FILES <<< "${{ steps.email.outputs.files }}"
          for file_path in "${FILES[@]}"; do
            filename=$(basename "$file_path")
            key=${TEMPLATE_KEYS[$filename]}
            if [ -n "$key" ]; then
              content=$(< "$file_path")
              content_json=$(jq -Rn --arg str "$content" '$str')
              PAYLOAD="$PAYLOAD\"$key\":$content_json,"
              echo "Deploying template: $filename"
            fi
          done
          PAYLOAD="${PAYLOAD%,}}"
          curl -s -X PATCH "https://api.supabase.com/v1/projects/$PROJECT_ID/config/auth" \
            -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"
          echo "‚úÖ Auth email templates updated successfully."

      # ----------------------------
      # Job Summary
      # ----------------------------
      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ steps.functions.outputs.changed }}" == "false" ] && [ "${{ steps.email.outputs.changed }}" == "false" ]; then
            echo "## üöÄ Supabase Deployment Summary" >> $GITHUB_STEP_SUMMARY
            echo "- No changes detected. No deployments were necessary." >> $GITHUB_STEP_SUMMARY
          else
            echo "## üöÄ Supabase Deployment Summary" >> $GITHUB_STEP_SUMMARY
            if [ "${{ steps.functions.outputs.changed }}" == "true" ]; then
              echo "- Functions deployed: \`${{ steps.functions.outputs.files_pretty }}\`" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ steps.email.outputs.changed }}" == "true" ]; then
              echo "- Email templates deployed: \`${{ steps.email.outputs.files_pretty }}\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi
