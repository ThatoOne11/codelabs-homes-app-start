name: Deploy Supabase Functions & Auth Email Templates

on:
  push:
    branches:
      - main
    paths:
      - "supabase/functions/**"
      - "supabase/email_templates/**"
  workflow_dispatch:
    inputs:
      commit_sha:
        description: "Optional: specify a commit SHA to deploy"
        default: ""

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and jq
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: sudo apt-get update && sudo apt-get install -y jq

      - name: Detect and Prepare Deployments
        id: deploy_prep
        run: |
          set -euo pipefail

          # Determine commit range based on trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.commit_sha }}" ]; then
            RANGE="${{ github.event.inputs.commit_sha }}^..${{ github.event.inputs.commit_sha }}"
            echo "Using specified commit SHA: ${{ github.event.inputs.commit_sha }}"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            RANGE="HEAD^..HEAD"
            echo "Manual run, using latest commit range: $RANGE"
          else
            RANGE="${{ github.event.before }}..${{ github.sha }}"
            echo "Push event, using range: $RANGE"
          fi

          CHANGED_FILES=$(git diff --name-only "$RANGE" || true)
          echo "Determined git diff range: $RANGE"

          # Detect changed functions
          FUNCS_TO_DEPLOY=$(echo "$CHANGED_FILES" | grep '^supabase/functions/' | cut -d'/' -f3 | sort -u | grep -E '^[a-zA-Z][a-zA-Z0-9_-]*$' || true)
          if [ -n "$FUNCS_TO_DEPLOY" ]; then
            echo "functions_changed=true" >> $GITHUB_OUTPUT
            echo "functions_list=$(echo "$FUNCS_TO_DEPLOY" | tr '\n' ' ')" >> $GITHUB_OUTPUT
            echo "functions_pretty=$(echo "$FUNCS_TO_DEPLOY" | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
          fi

          # Detect changed email templates
          CHANGED_EMAILS_RAW=$(echo "$CHANGED_FILES" | grep '^supabase/email_templates/.*\.html$' | sort -u || true)
          if [ -n "$CHANGED_EMAILS_RAW" ]; then
            CHANGED_EMAIL_PATHS=$(echo "$CHANGED_EMAILS_RAW" | paste -sd "," -)
            CHANGED_EMAIL_BASENAMES=$(echo "$CHANGED_EMAILS_RAW" | xargs -n 1 basename | paste -sd "," -)
            echo "email_changed=true" >> $GITHUB_OUTPUT
            echo "email_files=$CHANGED_EMAIL_PATHS" >> $GITHUB_OUTPUT
            echo "email_pretty=$CHANGED_EMAIL_BASENAMES" >> $GITHUB_OUTPUT
          fi

      - name: Deploy changed Edge Functions (Batch)
        if: steps.deploy_prep.outputs.functions_changed == 'true'
        run: |
          FUNCS=${{ steps.deploy_prep.outputs.functions_list }}
          echo "ðŸš€ Deploying functions: $(echo "$FUNCS" | tr ' ' ',')"
          npx supabase functions deploy $FUNCS --project-ref $PROJECT_ID

      - name: Sync Auth Email Templates
        if: steps.deploy_prep.outputs.email_changed == 'true'
        run: |
          echo "ðŸ“© Updating Auth email templates..."
          declare -A TEMPLATE_KEYS
          TEMPLATE_KEYS["invite.html"]="mailer_templates_invite_content"
          TEMPLATE_KEYS["reset_password.html"]="mailer_templates_recovery_content"
          TEMPLATE_KEYS["confirm_signup.html"]="mailer_templates_confirmation_content"
          TEMPLATE_KEYS["magic_link.html"]="mailer_templates_magic_link_content"
          TEMPLATE_KEYS["change_email.html"]="mailer_templates_email_change_content"

          PAYLOAD="{"
          IFS=',' read -ra FILES <<< "${{ steps.deploy_prep.outputs.email_files }}"
          for file_path in "${FILES[@]}"; do
            filename=$(basename "$file_path")
            key=${TEMPLATE_KEYS[$filename]}
            if [ -n "$key" ]; then
              content=$(< "$file_path")
              content_json=$(jq -Rn --arg str "$content" '$str')
              PAYLOAD="$PAYLOAD\"$key\":$content_json,"
              echo "Deploying template: $filename"
            fi
          done
          PAYLOAD="${PAYLOAD%,}}"

          curl -s -X PATCH "https://api.supabase.com/v1/projects/$PROJECT_ID/config/auth" \
            -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"
          echo "âœ… Auth email templates updated successfully."

      - name: Deployment Summary & Slack Notification
        if: always()
        id: summary_slack
        run: |
          SUMMARY=""
          if [ "${{ steps.deploy_prep.outputs.functions_changed }}" == "true" ]; then
            SUMMARY+="- Functions deployed: \`${{ steps.deploy_prep.outputs.functions_pretty }}\`\n"
          fi
          if [ "${{ steps.deploy_prep.outputs.email_changed }}" == "true" ]; then
            SUMMARY+="- Email templates deployed: \`${{ steps.deploy_prep.outputs.email_pretty }}\`\n"
          fi
          if [ -z "$SUMMARY" ]; then
            SUMMARY="- No changes detected. No deployments were necessary."
          fi

          # Write to GitHub Summary
          echo "## ðŸš€ Supabase Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo -e "$SUMMARY" >> $GITHUB_STEP_SUMMARY

          # Set Slack message output
          delimiter="$(openssl rand -hex 8)"
          echo "slack_text<<$delimiter" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "$delimiter" >> $GITHUB_OUTPUT

      - name: Slack Notification
        uses: slackapi/slack-github-action@v2.1.1
        if: always()
        with:
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          method: chat.postMessage
          payload-templated: true
          payload: |
            {
              "channel": "U093TBG6FST",
              "text": "Deployment Status: ${{ job.status }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Deployment Status: ${{ job.status }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Workflow: *${{ github.workflow }}*\nBranch: *${{ github.ref_name }}*\nCommit: `${{ github.sha }}`\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.summary_slack.outputs.slack_text }}"
                  }
                }
              ]
            }
