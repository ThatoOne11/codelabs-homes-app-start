name: Deploy Supabase Functions & Auth Email Templates

on:
  push:
    branches:
      - main
    paths:
      - "supabase/functions/**"
      - "supabase/email_templates/**"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_ID }}

    steps:
      # ----------------------------
      # Checkout repo
      # ----------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ----------------------------
      # Setup Node.js
      # ----------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # ----------------------------
      # Determine git diff range
      # ----------------------------
      - name: Set Git diff range
        id: git_range
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ]; then
            RANGE="HEAD"
            if git rev-parse HEAD^ >/dev/null 2>&1; then
              RANGE="HEAD^..HEAD"
            fi
          else
            RANGE="${{ github.event.before }}..${{ github.sha }}"
          fi
          echo "GITHUB_SHA_RANGE=$RANGE" >> $GITHUB_ENV
          echo "Determined git diff range: $RANGE"

      # ----------------------------
      # Detect changed functions & email templates
      # ----------------------------
      - name: Detect changed files
        id: detect_changes
        shell: bash
        run: |
          set -euo pipefail

          detect_changes() {
            TYPE=$1
            PATH_PREFIX=$2
            FILE_EXT=$3
            RANGE="${GITHUB_SHA_RANGE:-HEAD^..HEAD}"

            CHANGED=$(git diff --name-only "$RANGE" | grep "^$PATH_PREFIX" || true)

            if [ -n "$CHANGED" ]; then
              FILES=$(echo "$CHANGED" | paste -sd ',' -)
              echo "$TYPE changed: $CHANGED"
              echo "true,$FILES"
            elif [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ]; then
              ALL=$(ls $PATH_PREFIX*${FILE_EXT:+.$FILE_EXT} 2>/dev/null | paste -sd ',' -)
              if [ -n "$ALL" ]; then
                echo "Manual trigger: redeploying all $TYPE: $ALL"
                echo "true,$ALL"
              else
                echo "false,"
              fi
            else
              echo "No $TYPE changed."
              echo "false,"
            fi
          }

          # Detect functions
          read FUNCTIONS_CHANGED FUNCTIONS_FILES <<< $(detect_changes "functions" "supabase/functions/" "" | tr ',' ' ')
          echo "::set-output name=functions_changed::$FUNCTIONS_CHANGED"
          echo "::set-output name=functions_files::$FUNCTIONS_FILES"

          # Detect email templates
          read EMAIL_CHANGED EMAIL_FILES <<< $(detect_changes "email templates" "supabase/email_templates/" "html" | tr ',' ' ')
          echo "::set-output name=email_changed::$EMAIL_CHANGED"
          echo "::set-output name=email_files::$EMAIL_FILES"

      # ----------------------------
      # Skip deployment if no changes
      # ----------------------------
      - name: Check if any deploys needed
        run: |
          if [ "${{ steps.detect_changes.outputs.functions_changed }}" != "true" ] && [ "${{ steps.detect_changes.outputs.email_changed }}" != "true" ]; then
            echo "⚠️ No changes detected. Skipping deployment."
            exit 0
          fi

      # ----------------------------
      # Deploy changed Supabase functions
      # ----------------------------
      - name: Deploy Edge Functions
        if: steps.detect_changes.outputs.functions_changed == 'true'
        run: |
          echo "Functions to deploy: ${{ steps.detect_changes.outputs.functions_files }}"
          IFS=',' read -ra FUNCS <<< "${{ steps.detect_changes.outputs.functions_files }}"
          for fn in "${FUNCS[@]}"; do
            echo "🚀 Deploying function: $fn"
            npx supabase functions deploy "$fn" --project-ref $PROJECT_REF
          done

      # ----------------------------
      # Update Supabase Auth email templates
      # ----------------------------
      - name: Sync Auth Email Templates
        if: steps.detect_changes.outputs.email_changed == 'true'
        run: |
          echo "📩 Updating Auth email templates..."
          declare -A TEMPLATE_KEYS
          TEMPLATE_KEYS["invite.html"]="mailer_templates_invite_content"
          TEMPLATE_KEYS["reset_password.html"]="mailer_templates_recovery_content"
          TEMPLATE_KEYS["confirm_signup.html"]="mailer_templates_confirmation_content"
          TEMPLATE_KEYS["magic_link.html"]="mailer_templates_magic_link_content"
          TEMPLATE_KEYS["change_email.html"]="mailer_templates_email_change_content"

          PAYLOAD="{"
          IFS=',' read -ra FILES <<< "${{ steps.detect_changes.outputs.email_files }}"
          for file in "${FILES[@]}"; do
            filename=$(basename "$file")
            key=${TEMPLATE_KEYS[$filename]}
            if [ -n "$key" ]; then
              content=$(< "$file")
              content_json=$(jq -Rn --arg str "$content" '$str')
              PAYLOAD="$PAYLOAD\"$key\":$content_json,"
              echo "Deploying template: $filename"
            fi
          done
          PAYLOAD="${PAYLOAD%,}}"

          curl -s -X PATCH "https://api.supabase.com/v1/projects/$PROJECT_REF/config/auth" \
            -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"

          echo "✅ Auth email templates updated successfully."
