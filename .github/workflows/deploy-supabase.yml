name: Deploy Supabase Functions & Auth Email Templates

on:
  push:
    branches:
      - main
    paths:
      - "supabase/functions/**"
      - "supabase/email_templates/**"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ----------------------------
      # Checkout repo
      # ----------------------------
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ----------------------------
      # Setup Node.js
      # ----------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # ----------------------------
      # Determine git diff range
      # ----------------------------
      - name: Determine git diff range
        id: git_range
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RANGE="HEAD"
            if git rev-parse HEAD^ >/dev/null 2>&1; then
              RANGE="HEAD^..HEAD"
            fi
          else
            RANGE="${{ github.event.before }}..${{ github.sha }}"
          fi
          echo "range=$RANGE" >> $GITHUB_OUTPUT
          echo "Determined git diff range: $RANGE"
      # ----------------------------
      # Detect changed edge functions
      # ----------------------------
      - name: Get changed functions
        id: changes
        run: |
          CHANGED_FUNCS=$(git diff --name-only ${{ steps.git_range.outputs.range }} | grep '^supabase/functions/' | cut -d'/' -f3 | uniq || true)
          if [ -n "$CHANGED_FUNCS" ]; then
            echo "üöÄ Detected changed functions: $CHANGED_FUNCS"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "files=$CHANGED_FUNCS" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ]; then
            ALL_FUNCS=$(ls supabase/functions/ 2>/dev/null)
            if [ -n "$ALL_FUNCS" ]; then
              echo "üîÑ Manual trigger: redeploying all functions: $ALL_FUNCS"
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "files=$ALL_FUNCS" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è No edge functions found to deploy."
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è No edge functions changed."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Deploy changed Edge Functions
        if: steps.changes.outputs.changed == 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "Functions to deploy: ${{ steps.changes.outputs.files }}"
          for fn in ${{ steps.changes.outputs.files }}; do
            echo "üöÄ Deploying function: $fn"
            npx supabase functions deploy "$fn" --project-ref $PROJECT_ID
          done
      # ----------------------------
      # Detect changed email templates
      # ----------------------------
      - name: Check if email templates changed
        id: email
        run: |
          CHANGED_TEMPLATES=$(git diff --name-only ${{ steps.git_range.outputs.range }} | grep '^supabase/email_templates/.*\.html$' || true)
          if [ -n "$CHANGED_TEMPLATES" ]; then
            echo "üì© Detected changed templates: $CHANGED_TEMPLATES"
            CHANGED_TEMPLATES_SAFE=$(echo "$CHANGED_TEMPLATES" | paste -sd "," -)
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "files=$CHANGED_TEMPLATES_SAFE" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ]; then
            ALL_TEMPLATES=$(ls supabase/email_templates/*.html 2>/dev/null | paste -sd "," -)
            if [ -n "$ALL_TEMPLATES" ]; then
              echo "üîÑ Manual trigger: redeploying all templates: $ALL_TEMPLATES"
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "files=$ALL_TEMPLATES" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è No email templates found to deploy."
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è No email templates changed."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      # ----------------------------
      # Skip deploy if no changes detected
      # ----------------------------
      - name: Check if any deploys needed
        run: |
          if [ "${{ steps.changes.outputs.changed }}" != "true" ] && [ "${{ steps.email.outputs.changed }}" != "true" ]; then
            echo "‚ö†Ô∏è No changes detected. Skipping all deployments."
            exit 0
          fi
      # ----------------------------
      # Update Supabase Auth Email Templates
      # ----------------------------
      - name: Sync Auth Email Templates
        if: steps.email.outputs.changed == 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "üì© Updating Auth email templates..."
          declare -A TEMPLATE_KEYS
          TEMPLATE_KEYS["invite.html"]="mailer_templates_invite_content"
          TEMPLATE_KEYS["reset_password.html"]="mailer_templates_recovery_content"
          TEMPLATE_KEYS["confirm_signup.html"]="mailer_templates_confirmation_content"
          TEMPLATE_KEYS["magic_link.html"]="mailer_templates_magic_link_content"
          TEMPLATE_KEYS["change_email.html"]="mailer_templates_email_change_content"
          PAYLOAD="{"
          IFS=',' read -ra FILES <<< "${{ steps.email.outputs.files }}"
          for file in "${FILES[@]}"; do
            filename=$(basename "$file")
            key=${TEMPLATE_KEYS[$filename]}
            if [ -n "$key" ]; then
              content=$(< "$file")
              content_json=$(jq -Rn --arg str "$content" '$str')
              PAYLOAD="$PAYLOAD\"$key\":$content_json,"
              echo "Deploying template: $filename"
            fi
          done
          PAYLOAD="${PAYLOAD%,}}"
          curl -s -X PATCH "https://api.supabase.com/v1/projects/$PROJECT_REF/config/auth" \
            -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"
          echo "‚úÖ Auth email templates updated successfully."
