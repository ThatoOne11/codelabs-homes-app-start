name: Deploy Supabase Functions & Auth Email Templates

on:
  push:
    branches:
      - main
    paths:
      - "supabase/functions/**"
      - "supabase/email_templates/**"
  workflow_dispatch:
    inputs:
      commit_sha:
        description: "Optional: specify a commit SHA to deploy"
        default: ""

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and dependencies
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Detect and Prepare Deployments
        id: deploy_prep
        run: |
          set -euo pipefail

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            RANGE="HEAD^..HEAD"
            if [ -n "${{ github.event.inputs.commit_sha }}" ]; then
              RANGE="${{ github.event.inputs.commit_sha }}^..${{ github.event.inputs.commit_sha }}"
            fi
          else
            RANGE="${{ github.event.before }}..${{ github.sha }}"
          fi
          echo "Using git diff range: $RANGE"

          # Use `sort -u` to deduplicate the list of function names and file paths.
          mapfile -t changed_funcs < <(git diff --name-only --diff-filter=AM "$RANGE" | grep 'supabase/functions/' | cut -d'/' -f3 | sort -u | grep -E '^[a-zA-Z][a-zA-Z0-9_-]*$' || true)
          mapfile -t deleted_funcs < <(git diff --name-only --diff-filter=D "$RANGE" | grep 'supabase/functions/' | cut -d'/' -f3 | sort -u | grep -E '^[a-zA-Z][a-zA-Z0-9_-]*$' || true)
          mapfile -t changed_emails < <(git diff --name-only --diff-filter=AM "$RANGE" | grep 'supabase/email_templates/.*\.html$' | sort -u || true)
          mapfile -t deleted_emails < <(git diff --name-only --diff-filter=D "$RANGE" | grep 'supabase/email_templates/.*\.html$' | sort -u || true)

          if [ ${#changed_funcs[@]} -gt 0 ]; then
            echo "functions_changed=true" >> $GITHUB_OUTPUT
            echo "functions_list=$(IFS=' '; echo "${changed_funcs[*]}")" >> $GITHUB_OUTPUT
            echo "functions_pretty=$(IFS=,; echo "${changed_funcs[*]}")" >> $GITHUB_OUTPUT
          fi
          if [ ${#deleted_funcs[@]} -gt 0 ]; then
            echo "functions_deleted=true" >> $GITHUB_OUTPUT
            echo "functions_to_delete=$(IFS=' '; echo "${deleted_funcs[*]}")" >> $GITHUB_OUTPUT
            echo "functions_to_delete_pretty=$(IFS=,; echo "${deleted_funcs[*]}")" >> $GITHUB_OUTPUT
          fi
          if [ ${#changed_emails[@]} -gt 0 ]; then
            echo "email_changed=true" >> $GITHUB_OUTPUT
            echo "email_files=$(IFS=,; echo "${changed_emails[*]}")" >> $GITHUB_OUTPUT
            echo "email_pretty=$(printf "%s\n" "${changed_emails[@]}" | xargs -n 1 basename | paste -sd "," -)" >> $GITHUB_OUTPUT
          fi
          if [ ${#deleted_emails[@]} -gt 0 ]; then
            echo "email_deleted=true" >> $GITHUB_OUTPUT
            echo "email_to_delete=$(printf "%s\n" "${deleted_emails[@]}" | xargs -n 1 basename | paste -sd "," -)" >> $GITHUB_OUTPUT
          fi

      - name: Deploy and Delete Edge Functions
        if: steps.deploy_prep.outputs.functions_changed == 'true' || steps.deploy_prep.outputs.functions_deleted == 'true'
        run: |
          if [ "${{ steps.deploy_prep.outputs.functions_changed }}" == "true" ]; then
            echo "üöÄ Deploying functions: ${{ steps.deploy_prep.outputs.functions_pretty }}"
            npx supabase functions deploy ${{ steps.deploy_prep.outputs.functions_list }} --project-ref $PROJECT_ID
          fi
          if [ "${{ steps.deploy_prep.outputs.functions_deleted }}" == "true" ]; then
            echo "üóëÔ∏è Deleting functions: ${{ steps.deploy_prep.outputs.functions_to_delete_pretty }}"
            echo "${{ steps.deploy_prep.outputs.functions_to_delete }}" | xargs -n 1 npx supabase functions delete --project-ref $PROJECT_ID
          fi

      - name: Patch Auth Email Templates
        if: steps.deploy_prep.outputs.email_changed == 'true' || steps.deploy_prep.outputs.email_deleted == 'true'
        run: |
          set -euo pipefail

          PAYLOAD_JSON='{}'
          declare -A email_map=(
            ["invite.html"]="mailer_templates_invite_content"
            ["reset_password.html"]="mailer_templates_recovery_content"
            ["confirm_signup.html"]="mailer_templates_confirmation_content"
            ["magic_link.html"]="mailer_templates_magic_link_content"
            ["change_email.html"]="mailer_templates_email_change_content"
          )
          declare -A default_content=(
            ["invite.html"]="<h2>You have been invited</h2><p>You have been invited to create a user on {{ .SiteURL }}. Follow this link to accept the invite:</p><p><a href=\"{{ .ConfirmationURL }}\">Accept the invite</a></p>"
            ["reset_password.html"]="<h2>Reset Password</h2><p>Follow this link to reset the password for your user:</p><p><a href=\"{{ .ConfirmationURL }}\">Reset Password</a></p>"
            ["confirm_signup.html"]="<h2>Confirm your signup</h2><p>Follow this link to confirm your user:</p><p><a href=\"{{ .ConfirmationURL }}\">Confirm your email</a></p>"
            ["magic_link.html"]="<h2>Magic Link</h2><p>Follow this link to login:</p><p><a href=\"{{ .ConfirmationURL }}\">Log In</a></p>"
            ["change_email.html"]="<h2>Confirm email change</h2><p>Follow this link to confirm the update of your email:</p><p><a href=\"{{ .ConfirmationURL }}\">Change email</a></p>"
          )
          if [ "${{ steps.deploy_prep.outputs.email_changed }}" == "true" ]; then
            echo "üì© Updating Auth email templates..."
            IFS=',' read -r -a changed_emails_array <<< "${{ steps.deploy_prep.outputs.email_files }}"
            for file_path in "${changed_emails_array[@]}"; do
              filename=$(basename "$file_path")
              key=${email_map["$filename"]}
              if [ -n "$key" ]; then
                content=$(cat "$file_path")
                PAYLOAD_JSON=$(echo "$PAYLOAD_JSON" | jq --arg key "$key" --arg content "$content" '.[$key] = $content')
                echo "Adding to payload: $filename"
              fi
            done
          fi
          if [ "${{ steps.deploy_prep.outputs.email_deleted }}" == "true" ]; then
            echo "üóëÔ∏è Restoring deleted Auth email templates from docs..."
            IFS=',' read -r -a deleted_emails_array <<< "${{ steps.deploy_prep.outputs.email_to_delete }}"
            for filename in "${deleted_emails_array[@]}"; do
              key=${email_map["$filename"]}
              content=${default_content["$filename"]}
              if [ -n "$key" ] && [ -n "$content" ]; then
                PAYLOAD_JSON=$(echo "$PAYLOAD_JSON" | jq --arg key "$key" --arg content "$content" '.[$key] = $content')
                echo "Adding to payload: $filename"
              fi
            done
          fi
          if [ "$PAYLOAD_JSON" != "{}" ]; then
            echo "Final payload: $PAYLOAD_JSON"
            curl -s -X PATCH "https://api.supabase.com/v1/projects/$PROJECT_ID/config/auth" \
              -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD_JSON"
            echo "‚úÖ Auth email templates patched successfully."
          else
            echo "No email templates to patch."
          fi

      - name: Deployment Summary
        if: always()
        id: summary_prep
        run: |
          SUMMARY=""
          if [ "${{ steps.deploy_prep.outputs.functions_changed }}" == "true" ]; then
            SUMMARY+="- Functions deployed: \`${{ steps.deploy_prep.outputs.functions_pretty }}\`\n"
          fi
          if [ "${{ steps.deploy_prep.outputs.functions_deleted }}" == "true" ]; then
            SUMMARY+="- Functions deleted: \`${{ steps.deploy_prep.outputs.functions_to_delete_pretty }}\`\n"
          fi
          if [ "${{ steps.deploy_prep.outputs.email_changed }}" == "true" ]; then
            SUMMARY+="- Email templates updated: \`${{ steps.deploy_prep.outputs.email_pretty }}\`\n"
          fi
          if [ "${{ steps.deploy_prep.outputs.email_deleted }}" == "true" ]; then
            SUMMARY+="- Email templates deleted and reset: \`${{ steps.deploy_prep.outputs.email_to_delete }}\`\n"
          fi
          if [ -z "$SUMMARY" ]; then
            SUMMARY="- No changes detected. No deployments were necessary."
          fi
          echo "## üöÄ Supabase Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo -e "$SUMMARY" >> $GITHUB_STEP_SUMMARY
          echo "slack_text=$SUMMARY" >> $GITHUB_OUTPUT

      - name: Slack Notification
        uses: slackapi/slack-github-action@v2.1.1
        if: always()
        with:
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          method: chat.postMessage
          payload-templated: true
          payload: |
            {
              "channel": "U093TBG6FST",
              "text": "Deployment Status: ${{ job.status }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Deployment Status: ${{ job.status }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Workflow: *${{ github.workflow }}*\nBranch: *${{ github.ref_name }}*\nCommit: `${{ github.sha }}`\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.summary_prep.outputs.slack_text }}"
                  }
                }
              ]
            }
